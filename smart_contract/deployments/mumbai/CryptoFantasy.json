{
  "address": "0x032bc4B0d5e89BF25a0b387dB390f88321C29d44",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CryptoFantasy__AlreadyJoinedThisContest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CryptoFantasy__CheckTimingsOfContest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CryptoFantasy__ContestEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CryptoFantasy__ContestNotStartedYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CryptoFantasy__JoiningDeadlinePassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CryptoFantasy__ValueNotEqualToEntryFee",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "data",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilledEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contestPlayedByUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apiMatchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolPrize",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalTeams",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "joinDeadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "matchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "joinDeadline",
          "type": "uint256"
        }
      ],
      "name": "createContest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contestId",
          "type": "uint256"
        }
      ],
      "name": "findWinnerOfContest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "data",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillPlayerData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "data",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillScoreData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getContestPlayedByUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "contestId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "apiMatchId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entryFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolPrize",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalTeams",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "teamOwners",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "startDateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "joinDeadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct CryptoFantasy.Contest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getContestTeamOfUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "teamOwner",
              "type": "address"
            },
            {
              "internalType": "uint256[11]",
              "name": "playerIds",
              "type": "uint256[11]"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            }
          ],
          "internalType": "struct CryptoFantasy.Team",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contestId",
          "type": "uint256"
        }
      ],
      "name": "getContestTeams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "teamOwner",
              "type": "address"
            },
            {
              "internalType": "uint256[11]",
              "name": "playerIds",
              "type": "uint256[11]"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            }
          ],
          "internalType": "struct CryptoFantasy.Team[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[11]",
          "name": "playerIds",
          "type": "uint256[11]"
        }
      ],
      "name": "joinMatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfContests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "matchId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "dataType",
          "type": "bool"
        }
      ],
      "name": "requestContestData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "teamsOfContest",
      "outputs": [
        {
          "internalType": "address",
          "name": "teamOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalContest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apiMatchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolPrize",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalTeams",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "joinDeadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e8f086696a6c8a68a1a0ca6e9fedc30fd169b0d1ce7751f7a439121cb8096ec",
  "receipt": {
    "to": null,
    "from": "0x3d772032687fEd06350b1DD7457737Cc4cDb5E2f",
    "contractAddress": "0x032bc4B0d5e89BF25a0b387dB390f88321C29d44",
    "transactionIndex": 10,
    "gasUsed": "3739227",
    "logsBloom": "0x
    "blockHash": "0x6b167ca83044b4b7d3fd11132078bf9ff2722d971edbf56049e95af3c27705d2",
    "transactionHash": "0x9e8f086696a6c8a68a1a0ca6e9fedc30fd169b0d1ce7751f7a439121cb8096ec",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 26325125,
        "transactionHash": "0x9e8f086696a6c8a68a1a0ca6e9fedc30fd169b0d1ce7751f7a439121cb8096ec",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003d772032687fed06350b1dd7457737cc4cdb5e2f",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000903b9a316428b70000000000000000000000000000000000000000000000013a691d7637c4a88600000000000000000000000000000000000000000000020f516dbfaf37e186c400000000000000000000000000000000000000000000000139d8e1dc06607fcf00000000000000000000000000000000000000000000020f51fdfb496945af7b",
        "logIndex": 22,
        "blockHash": "0x6b167ca83044b4b7d3fd11132078bf9ff2722d971edbf56049e95af3c27705d2"
      }
    ],
    "blockNumber": 26325125,
    "cumulativeGasUsed": "4833412",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d9db3219c9065ec2358a4a3effee0a6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CryptoFantasy__AlreadyJoinedThisContest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CryptoFantasy__CheckTimingsOfContest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CryptoFantasy__ContestEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CryptoFantasy__ContestNotStartedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CryptoFantasy__JoiningDeadlinePassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CryptoFantasy__ValueNotEqualToEntryFee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilledEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contestPlayedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apiMatchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolPrize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTeams\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinDeadline\",\"type\":\"uint256\"}],\"name\":\"createContest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestId\",\"type\":\"uint256\"}],\"name\":\"findWinnerOfContest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"fulfillPlayerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"fulfillScoreData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getContestPlayedByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"contestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apiMatchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolPrize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTeams\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"teamOwners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"startDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoFantasy.Contest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getContestTeamOfUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"teamOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[11]\",\"name\":\"playerIds\",\"type\":\"uint256[11]\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoFantasy.Team\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestId\",\"type\":\"uint256\"}],\"name\":\"getContestTeams\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"teamOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[11]\",\"name\":\"playerIds\",\"type\":\"uint256[11]\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoFantasy.Team[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[11]\",\"name\":\"playerIds\",\"type\":\"uint256[11]\"}],\"name\":\"joinMatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfContests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"dataType\",\"type\":\"bool\"}],\"name\":\"requestContestData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamsOfContest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"teamOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalContest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apiMatchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolPrize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTeams\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jaswinder Singh   - https://github.com/jassi-singh\",\"kind\":\"dev\",\"methods\":{\"createContest(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"endDateTime\":\"end time of the contest\",\"fee\":\", entryFee of the contest\",\"joinDeadline\":\"end time of the contest\",\"matchId\":\": match id of the real match\",\"startDateTime\":\", start time of the contest\"}},\"findWinnerOfContest(uint256)\":{\"params\":{\"contestId\":\": id of the contest whose winner to be calculated\"}},\"fulfillPlayerData(bytes32,uint256[])\":{\"params\":{\"data\":\"recieved from api\",\"requestId\":\"id of request made to node\"}},\"fulfillScoreData(bytes32,uint256[])\":{\"params\":{\"data\":\"recieved from api\",\"requestId\":\"id of request made to node\"}},\"getContestPlayedByUser(address)\":{\"params\":{\"user\":\"address of user\"}},\"getContestTeamOfUser(uint256,address)\":{\"params\":{\"contestId\":\"id of the contest\",\"user\":\"address of user whose team you need\"}},\"getContestTeams(uint256)\":{\"params\":{\"contestId\":\"id of the contest\"}},\"joinMatch(uint256,uint256[11])\":{\"params\":{\"contestId\":\": a integer id of the match which user wants to join\",\"playerIds\":\": list of player ids (number of ids must be 11 as in a cricket match there are 11 players each team) present in the users team.\"}},\"requestContestData(uint256,uint256,bool)\":{\"params\":{\"contestId\":\", id of the contest\",\"dataType\":\"data type of data , if true player id, if false scores \",\"matchId\":\", id of the match\"}}},\"title\":\"Crypto Fantasy is a decentralized fantasy cricket game\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"createContest(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"allow only the contract owner to create the new contests which users can join and play\"},\"findWinnerOfContest(uint256)\":{\"notice\":\"start finding winner of a contest\"},\"fulfillPlayerData(bytes32,uint256[])\":{\"notice\":\"fullfill function for chainlink node to provide the data of playerids from api\"},\"fulfillScoreData(bytes32,uint256[])\":{\"notice\":\"fullfill function for chainlink node to provide the data of scores from api\"},\"getContestPlayedByUser(address)\":{\"notice\":\"get the list of contests played by a particular user\"},\"getContestTeamOfUser(uint256,address)\":{\"notice\":\"get the list of players of a user in a contest\"},\"getContestTeams(uint256)\":{\"notice\":\"get the mapping of all the user to team in a contest\"},\"joinMatch(uint256,uint256[11])\":{\"notice\":\"allow user to participate in a upcoming match\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"requestContestData(uint256,uint256,bool)\":{\"notice\":\"function to request chainlink node for the data from api\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"Anybody can play fantasy cricket game in a decentralized way with the help of this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/cryptoFantasy.sol\":\"CryptoFantasy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5efa2a2ed44af15fd5bec8c43b45cb26fe6cb68671fea151e6afcfed66ed2672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/apiConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\ncontract ApiConsumer is ChainlinkClient, ConfirmedOwner {\\n    using Chainlink for Chainlink.Request;\\n    using Strings for uint256;\\n    uint256 private constant ORACLE_PAYMENT =\\n        ((0 * LINK_DIVISIBILITY) / 100) * 5;\\n    bytes32 private constant JOB_ID = \\\"412871186b47499fa4926bcda2526674\\\";\\n\\n    constructor() ConfirmedOwner(msg.sender) {\\n        setChainlinkToken(0x326C977E6efc84E512bB9C30f76E30c160eD06FB);\\n        setChainlinkOracle(0xedaa6962Cf1368a92e244DdC11aaC49c0A0acC37);\\n    }\\n\\n    mapping(uint256 => mapping(uint256 => uint256))\\n        internal scoresOfPlayerInContest;\\n\\n    mapping(uint256 => uint256[22]) private scoresOfContest;\\n    mapping(uint256 => uint256[22]) private playersOfContest;\\n\\n    event RequestFulfilledEvent(bytes32 indexed requestId, uint256[] data);\\n\\n    ///@notice function to request chainlink node for the data from api\\n    ///@param contestId , id of the contest\\n    ///@param matchId , id of the match\\n    ///@param dataType data type of data , if true player id, if false scores \\n    function requestContestData(\\n        uint256 contestId,\\n        uint256 matchId,\\n        bool dataType\\n    ) public onlyOwner {\\n        bytes4 callbackFunction;\\n\\n        if (dataType) callbackFunction = this.fulfillPlayerData.selector;\\n        else callbackFunction = this.fulfillScoreData.selector;\\n\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            JOB_ID,\\n            address(this),\\n            callbackFunction\\n        );\\n        req.add(\\n            \\\"get\\\",\\n            string(\\n                abi.encodePacked(\\n                    \\\"https://crypto-fantasy-dapp.vercel.app/api/score?matchId=\\\",\\n                    matchId.toString(),\\n                    \\\"&contestId=\\\",\\n                    contestId.toString()\\n                )\\n            )\\n        );\\n        if (dataType) req.add(\\\"path\\\", \\\"data,player-id\\\");\\n        else req.add(\\\"path\\\", \\\"data,scores\\\");\\n\\n        sendOperatorRequest(req, ORACLE_PAYMENT);\\n    }\\n\\n    ///@notice fullfill function for chainlink node to provide the data of playerids from api\\n    ///@param requestId id of request made to node\\n    ///@param data recieved from api\\n    function fulfillPlayerData(bytes32 requestId, uint256[] memory data)\\n        public\\n        recordChainlinkFulfillment(requestId)\\n    {\\n        emit RequestFulfilledEvent(requestId, data);\\n        uint256 contestId = data[0];\\n        for (uint8 i = 1; i < 23; i++)\\n            playersOfContest[contestId][i - 1] = data[i];\\n    }\\n\\n    ///@notice fullfill function for chainlink node to provide the data of scores from api\\n    ///@param requestId id of request made to node\\n    ///@param data recieved from api\\n    function fulfillScoreData(bytes32 requestId, uint256[] memory data)\\n        public\\n        recordChainlinkFulfillment(requestId)\\n    {\\n        emit RequestFulfilledEvent(requestId, data);\\n        uint256 contestId = data[0];\\n        for (uint8 i = 1; i < 23; i++)\\n            scoresOfContest[contestId][i - 1] = data[i];\\n\\n        getScoresOfPlayersInContest(contestId);\\n    }\\n\\n    ///@notice combine the scores and player id of a particular contest\\n    ///@param contestId id of the contest\\n    function getScoresOfPlayersInContest(uint256 contestId) internal {\\n        for (uint256 i = 0; i < 22; i++) {\\n            scoresOfPlayerInContest[contestId][\\n                playersOfContest[contestId][i]\\n            ] = scoresOfContest[contestId][i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ab891a69f16827b870b556a1e3a0811701b1a684fb20a1b2f80bbc999166213\",\"license\":\"MIT\"},\"contracts/cryptoFantasy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./apiConsumer.sol\\\";\\nimport \\\"./errors.sol\\\";\\n\\n///@title Crypto Fantasy is a decentralized fantasy cricket game\\n///@author  Jaswinder Singh   - https://github.com/jassi-singh\\n///@notice Anybody can play fantasy cricket game in a decentralized way with the help of this contract.\\ncontract CryptoFantasy is ApiConsumer {\\n    constructor() {}\\n\\n    struct Contest {\\n        uint256 contestId;\\n        uint256 apiMatchId;\\n        uint256 entryFee;\\n        uint256 poolPrize;\\n        address winner;\\n        uint256 totalTeams;\\n        address[] teamOwners;\\n        uint256 startDateTime;\\n        uint256 endDateTime;\\n        uint256 joinDeadline;\\n    }\\n    struct Team {\\n        address teamOwner;\\n        uint256[11] playerIds;\\n        uint256 score;\\n    }\\n\\n    mapping(uint256 => Contest) public totalContest;\\n    mapping(uint256 => mapping(address => Team)) public teamsOfContest;\\n    mapping(address => Contest[]) public contestPlayedByUser;\\n    uint256 public numberOfContests;\\n\\n    ///@notice allow only the contract owner to create the new contests which users can join and play\\n    ///@param matchId : match id of the real match\\n    ///@param fee , entryFee of the contest\\n    ///@param startDateTime , start time of the contest\\n    ///@param endDateTime end time of the contest\\n    ///@param joinDeadline end time of the contest\\n    function createContest(\\n        uint256 matchId,\\n        uint256 fee,\\n        uint256 startDateTime,\\n        uint256 endDateTime,\\n        uint256 joinDeadline\\n    ) external onlyOwner {\\n        totalContest[numberOfContests] = Contest(\\n            numberOfContests,\\n            matchId,\\n            fee,\\n            0,\\n            address(0),\\n            0,\\n            new address[](0),\\n            startDateTime,\\n            endDateTime,\\n            joinDeadline\\n        );\\n        numberOfContests++;\\n\\n        if (\\n            startDateTime >= joinDeadline ||\\n            startDateTime >= endDateTime ||\\n            joinDeadline >= endDateTime\\n        ) revert CryptoFantasy__CheckTimingsOfContest();\\n    }\\n\\n    ///@notice allow user to participate in a upcoming match\\n    ///@param contestId : a integer id of the match which user wants to join\\n    ///@param playerIds : list of player ids (number of ids must be 11 as in a cricket match there are 11 players each team) present in the users team.\\n    function joinMatch(uint256 contestId, uint256[11] memory playerIds)\\n        external\\n        payable\\n    {\\n        Contest storage contest = totalContest[contestId];\\n        if (\\n            teamsOfContest[contestId][address(msg.sender)].teamOwner !=\\n            address(0)\\n        ) {\\n            revert CryptoFantasy__AlreadyJoinedThisContest();\\n        }\\n        contest.poolPrize += contest.entryFee;\\n        contest.totalTeams++;\\n        contest.teamOwners.push(address(msg.sender));\\n        teamsOfContest[contestId][address(msg.sender)] = Team(\\n            address(msg.sender),\\n            playerIds,\\n            0\\n        );\\n        contestPlayedByUser[address(msg.sender)].push(contest);\\n        if (block.timestamp < contest.startDateTime)\\n            revert CryptoFantasy__ContestNotStartedYet();\\n        if (block.timestamp > contest.endDateTime)\\n            revert CryptoFantasy__ContestEnded();\\n        if (block.timestamp > contest.joinDeadline)\\n            revert CryptoFantasy__JoiningDeadlinePassed();\\n        if (msg.value != contest.entryFee) {\\n            revert CryptoFantasy__ValueNotEqualToEntryFee();\\n        }\\n    }\\n\\n    ///@notice get the list of contests played by a particular user\\n    ///@param user address of user\\n    function getContestPlayedByUser(address user)\\n        public\\n        view\\n        returns (Contest[] memory)\\n    {\\n        return contestPlayedByUser[user];\\n    }\\n\\n    ///@notice get the list of players of a user in a contest\\n    ///@param contestId id of the contest\\n    ///@param user address of user whose team you need\\n    function getContestTeamOfUser(uint256 contestId, address user)\\n        public\\n        view\\n        returns (Team memory)\\n    {\\n        return teamsOfContest[contestId][user];\\n    }\\n\\n    ///@notice get the mapping of all the user to team in a contest\\n    ///@param contestId id of the contest\\n    function getContestTeams(uint256 contestId)\\n        public\\n        view\\n        returns (Team[] memory)\\n    {\\n        address[] memory teamOwners = totalContest[contestId].teamOwners;\\n        Team[] memory allTeams = new Team[](teamOwners.length);\\n        for (uint256 i = 0; i < teamOwners.length; i++) {\\n            allTeams[i] = teamsOfContest[contestId][teamOwners[i]];\\n        }\\n        return allTeams;\\n    }\\n\\n    ///@notice start finding winner of a contest\\n    ///@param contestId : id of the contest whose winner to be calculated\\n    function findWinnerOfContest(uint256 contestId) external onlyOwner {\\n        Contest memory contest = totalContest[contestId];\\n        requestContestData(contestId, contest.apiMatchId, true);\\n        requestContestData(contestId, contest.apiMatchId, false);\\n        calculatePointsAllTeams(contestId);\\n    }\\n\\n    ///@notice calculate the total points of all teams in a contest\\n    ///@param contestId , is the id of the contest\\n    function calculatePointsAllTeams(uint256 contestId) private {\\n        Contest storage contest = totalContest[contestId];\\n        uint256 maxScore = 0;\\n        for (uint256 i = 0; i < contest.totalTeams; i++) {\\n            Team storage team = teamsOfContest[contestId][\\n                contest.teamOwners[i]\\n            ];\\n            team.score = calculateScoreOfTeam(team.playerIds, contestId);\\n            if (team.score > maxScore) {\\n                contest.winner = team.teamOwner;\\n            }\\n        }\\n    }\\n\\n    ///@notice calculate the score of the a particular team in a contest and retunrs it\\n    ///@param playerIds is array of player ids in a team\\n    ///@param contestId is the id of the contest\\n    function calculateScoreOfTeam(\\n        uint256[11] memory playerIds,\\n        uint256 contestId\\n    ) private view returns (uint256) {\\n        uint256 score = 0;\\n        for (uint256 i = 0; i < 11; i++) {\\n            score += scoresOfPlayerInContest[contestId][playerIds[i]];\\n        }\\n        return score;\\n    }\\n}\\n\",\"keccak256\":\"0xb47c952a8f670b5eef3f8292798d7b70cf4ff59ce436588acbb8abfe13fdd439\",\"license\":\"MIT\"},\"contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nerror CryptoFantasy__ValueNotEqualToEntryFee();\\nerror CryptoFantasy__AlreadyJoinedThisContest();\\nerror CryptoFantasy__ContestNotStartedYet();\\nerror CryptoFantasy__ContestEnded();\\nerror CryptoFantasy__JoiningDeadlinePassed();\\nerror CryptoFantasy__CheckTimingsOfContest();\\n\",\"keccak256\":\"0x78caf72d6239c5b013cac4eeaf402873c7c817392b1b28bc653afd6eb90579a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c8063d0af7d2a1161008a578063f2fde38b11610059578063f2fde38b14610334578063f7b70b281461035d578063f7ba6e8b146103a2578063f7e4a35d146103cb576100f3565b8063d0af7d2a1461026d578063df9bbefc146102b2578063e5142272146102ce578063ebadb4b8146102f7576100f3565b80638da5cb5b116100c65780638da5cb5b1461019f5780639ac6f0a2146101ca5780639bb517f014610207578063c6d60eda14610244576100f3565b806331b58330146100f85780636b1fbc90146101365780636bc2bbf61461015f57806379ba509714610188575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190612d5d565b6103f6565b60405161012d9291906134b9565b60405180910390f35b34801561014257600080fd5b5061015d60048036038101906101589190612e31565b610447565b005b34801561016b57600080fd5b5061018660048036038101906101819190612d30565b610637565b005b34801561019457600080fd5b5061019d6107c3565b005b3480156101ab57600080fd5b506101b461095a565b6040516101c1919061349e565b60405180910390f35b3480156101d657600080fd5b506101f160048036038101906101ec9190612d5d565b610984565b6040516101fe919061369c565b60405180910390f35b34801561021357600080fd5b5061022e60048036038101906102299190612d30565b610a94565b60405161023b91906135b8565b60405180910390f35b34801561025057600080fd5b5061026b60048036038101906102669190612cd4565b610cf0565b005b34801561027957600080fd5b50610294600480360381019061028f9190612c67565b610eda565b6040516102a9999897969594939291906136d3565b60405180910390f35b6102cc60048036038101906102c79190612d9d565b610f65565b005b3480156102da57600080fd5b506102f560048036038101906102f09190612cd4565b611416565b005b34801561030357600080fd5b5061031e60048036038101906103199190612c3a565b6115f7565b60405161032b9190613596565b60405180910390f35b34801561034057600080fd5b5061035b60048036038101906103569190612c3a565b6117ca565b005b34801561036957600080fd5b50610384600480360381019061037f9190612d30565b6117de565b604051610399999897969594939291906136d3565b60405180910390f35b3480156103ae57600080fd5b506103c960048036038101906103c49190612dde565b61184c565b005b3480156103d757600080fd5b506103e0611a68565b6040516103ed91906136b8565b60405180910390f35b600c602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600c0154905082565b61044f611a6e565b604051806101400160405280600e54815260200186815260200185815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600067ffffffffffffffff8111156104b5576104b4613e69565b5b6040519080825280602002602001820160405280156104e35781602001602082028036833780820191505090505b50815260200184815260200183815260200182815250600b6000600e5481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060190805190602001906105a3929190612881565b5060e0820151816007015561010082015181600801556101208201518160090155905050600e60008154809291906105da90613d0a565b919050555080831015806105ee5750818310155b806105f95750818110155b15610630576040517fca1d716900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b61063f611a6e565b6000600b600083815260200190815260200160002060405180610140016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561076d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610723575b50505050508152602001600782015481526020016008820154815260200160098201548152505090506107a6828260200151600161184c565b6107b6828260200151600061184c565b6107bf82611b00565b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a906135fc565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61098c61290b565b600c600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201600b806020026040519081016040528092919082600b8015610a79576020028201915b815481526020019060010190808311610a65575b50505050508152602001600c82015481525050905092915050565b60606000600b6000848152602001908152602001600020600601805480602002602001604051908101604052809291908181526020018280548015610b2e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ae4575b505050505090506000815167ffffffffffffffff811115610b5257610b51613e69565b5b604051908082528060200260200182016040528015610b8b57816020015b610b7861290b565b815260200190600190039081610b705790505b50905060005b8251811015610ce557600c60008681526020019081526020016000206000848381518110610bc257610bc1613e3a565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201600b806020026040519081016040528092919082600b8015610ca1576020028201915b815481526020019060010190808311610c8d575b50505050508152602001600c82015481525050828281518110610cc757610cc6613e3a565b5b60200260200101819052508080610cdd90613d0a565b915050610b91565b508092505050919050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d899061367c565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2827fc3bece9eff4a8466fe129f2f8e55aa63a0e1f3df7ed135aa9ee22657b204dc4783604051610e2591906135da565b60405180910390a2600082600081518110610e4357610e42613e3a565b5b602002602001015190506000600190505b60178160ff161015610eca57838160ff1681518110610e7657610e75613e3a565b5b602002602001015160096000848152602001908152602001600020600183610e9e9190613bb1565b60ff1660168110610eb257610eb1613e3a565b5b01819055508080610ec290613d53565b915050610e54565b50610ed481611c9a565b50505050565b600d6020528160005260406000208181548110610ef657600080fd5b90600052602060002090600a0201600091509150508060000154908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060070154908060080154908060090154905089565b6000600b60008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff16600c600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611055576040517fa5e2850c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806002015481600301600082825461106d919061392b565b9250508190555080600501600081548092919061108990613d0a565b919050555080600601339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018381526020016000815250600c600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190600b6111d3929190612948565b50604082015181600c0155905050600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600a0201600090919091909150600082015481600001556001820154816001015560028201548160020155600382015481600301556004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005820154816005015560068201816006019080546112f9929190612988565b5060078201548160070155600882015481600801556009820154816009015550508060070154421015611358576040517f8b5d736400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060080154421115611396576040517fcf1d066100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600901544211156113d4576040517f8ed1948200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600201543414611411576040517f2ab758d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114af9061367c565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2827fc3bece9eff4a8466fe129f2f8e55aa63a0e1f3df7ed135aa9ee22657b204dc478360405161154b91906135da565b60405180910390a260008260008151811061156957611568613e3a565b5b602002602001015190506000600190505b60178160ff1610156115f057838160ff168151811061159c5761159b613e3a565b5b6020026020010151600a60008481526020019081526020016000206001836115c49190613bb1565b60ff16601681106115d8576115d7613e3a565b5b018190555080806115e890613d53565b91505061157a565b5050505050565b6060600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156117bf57838290600052602060002090600a020160405180610140016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561178957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161173f575b50505050508152602001600782015481526020016008820154815260200160098201548152505081526020019060010190611658565b505050509050919050565b6117d2611a6e565b6117db81611d32565b50565b600b6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060070154908060080154908060090154905089565b611854611a6e565b6000811561186b5763e514227260e01b9050611876565b63c6d60eda60e01b90505b60006118a37f34313238373131383662343734393966613439323662636461323532363637343084611e61565b90506119206040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152506118e786611e92565b6118f088611e92565b604051602001611901929190613464565b60405160208183030381529060405283611ff39092919063ffffffff16565b82156119aa576119a56040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280600e81526020017f646174612c706c617965722d696400000000000000000000000000000000000081525083611ff39092919063ffffffff16565b611a2a565b611a296040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280600b81526020017f646174612c73636f72657300000000000000000000000000000000000000000081525083611ff39092919063ffffffff16565b5b611a608160056064670de0b6b3a76400006000611a479190613b23565b611a519190613981565b611a5b9190613b23565b612026565b505050505050565b600e5481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af59061363c565b60405180910390fd5b565b6000600b600083815260200190815260200160002090506000805b8260050154811015611c94576000600c60008681526020019081526020016000206000856006018481548110611b5457611b53613e3a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611c0481600101600b806020026040519081016040528092919082600b8015611bf9576020028201915b815481526020019060010190808311611be5575b50505050508661205d565b81600c01819055508281600c01541115611c80578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b508080611c8c90613d0a565b915050611b1b565b50505050565b60005b6016811015611d2e57600960008381526020019081526020016000208160168110611ccb57611cca613e3a565b5b0154600860008481526020019081526020016000206000600a60008681526020019081526020016000208460168110611d0757611d06613e3a565b5b01548152602001908152602001600020819055508080611d2690613d0a565b915050611c9d565b5050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d989061365c565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b611e696129da565b611e716129da565b611e88858585846120d7909392919063ffffffff16565b9150509392505050565b60606000821415611eda576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611fee565b600082905060005b60008214611f0c578080611ef590613d0a565b915050600a82611f059190613981565b9150611ee2565b60008167ffffffffffffffff811115611f2857611f27613e69565b5b6040519080825280601f01601f191660200182016040528015611f5a5781602001600182028036833780820191505090505b5090505b60008514611fe757600182611f739190613b7d565b9150600a85611f829190613dab565b6030611f8e919061392b565b60f81b818381518110611fa457611fa3613e3a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611fe09190613981565b9450611f5e565b8093505050505b919050565b61200a82846080015161218790919063ffffffff16565b61202181846080015161218790919063ffffffff16565b505050565b6000612055600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846121ac565b905092915050565b6000806000905060005b600b8110156120cc576008600085815260200190815260200160002060008683600b811061209857612097613e3a565b5b6020020151815260200190815260200160002054826120b7919061392b565b915080806120c490613d0a565b915050612067565b508091505092915050565b6120df6129da565b6120ef8560800151610100612276565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b61219482600383516122e0565b6121a7818361246590919063ffffffff16565b505050565b60008060045490506001816121c1919061392b565b6004819055506000633c6d41b960e01b600080876000015188604001518660028b608001516000015160405160240161220097969594939291906134e2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061226b86838684612487565b925050509392505050565b61227e612a47565b600060208361228d9190613dab565b146122b95760208261229f9190613dab565b60206122ab9190613b7d565b826122b6919061392b565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b60178167ffffffffffffffff1611612317576123118160058460ff16901b60ff16178461262b90919063ffffffff16565b50612460565b60ff8167ffffffffffffffff161161236d57612346601860058460ff16901b178461262b90919063ffffffff16565b506123678167ffffffffffffffff1660018561264b9092919063ffffffff16565b5061245f565b61ffff8167ffffffffffffffff16116123c45761239d601960058460ff16901b178461262b90919063ffffffff16565b506123be8167ffffffffffffffff1660028561264b9092919063ffffffff16565b5061245e565b63ffffffff8167ffffffffffffffff161161241d576123f6601a60058460ff16901b178461262b90919063ffffffff16565b506124178167ffffffffffffffff1660048561264b9092919063ffffffff16565b5061245d565b61243a601b60058460ff16901b178461262b90919063ffffffff16565b5061245b8167ffffffffffffffff1660088561264b9092919063ffffffff16565b505b5b5b5b505050565b61246d612a47565b61247f8384600001515184855161266d565b905092915050565b6000308460405160200161249c929190613438565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b815260040161259293929190613558565b602060405180830381600087803b1580156125ac57600080fd5b505af11580156125c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e49190612ca7565b612623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261a9061361c565b60405180910390fd5b949350505050565b612633612a47565b612643838460000151518461275c565b905092915050565b612653612a47565b6126648485600001515185856127b3565b90509392505050565b612675612a47565b825182111561268357600080fd5b84602001518285612694919061392b565b11156126c9576126c88560026126b9886020015188876126b4919061392b565b612841565b6126c39190613b23565b61285d565b5b6000808651805187602083010193508088870111156126e85787860182525b60208701925050505b6020841061272f578051825260208261270a919061392b565b9150602081612719919061392b565b90506020846127289190613b7d565b93506126f1565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b612764612a47565b8360200151831061278a5761278984600286602001516127849190613b23565b61285d565b5b83518051602085830101848153818614156127a6576001820183525b5050508390509392505050565b6127bb612a47565b846020015184836127cc919061392b565b11156127f4576127f385600286856127e4919061392b565b6127ee9190613b23565b61285d565b5b60006001836101006128069190613a05565b6128109190613b7d565b905085518386820101858319825116178152815185880111156128335784870182525b505085915050949350505050565b60008183111561285357829050612857565b8190505b92915050565b6000826000015190506128708383612276565b5061287b8382612465565b50505050565b8280548282559060005260206000209081019282156128fa579160200282015b828111156128f95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906128a1565b5b5090506129079190612a61565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200161293b612a7e565b8152602001600081525090565b82600b8101928215612977579160200282015b8281111561297657825182559160200191906001019061295b565b5b5090506129849190612a61565b5090565b8280548282559060005260206000209081019282156129c95760005260206000209182015b828111156129c85782548255916001019190600101906129ad565b5b5090506129d69190612a61565b5090565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001612a41612a47565b81525090565b604051806040016040528060608152602001600081525090565b5b80821115612a7a576000816000905550600101612a62565b5090565b604051806101600160405280600b90602082028036833780820191505090505090565b6000612ab4612aaf84613785565b613760565b90508082856020860282011115612ace57612acd613e9d565b5b60005b85811015612afe5781612ae48882612c25565b845260208401935060208301925050600181019050612ad1565b5050509392505050565b6000612b1b612b16846137ab565b613760565b90508083825260208201905082856020860282011115612b3e57612b3d613e9d565b5b60005b85811015612b6e5781612b548882612c25565b845260208401935060208301925050600181019050612b41565b5050509392505050565b600081359050612b8781614068565b92915050565b600082601f830112612ba257612ba1613e98565b5b600b612baf848285612aa1565b91505092915050565b600082601f830112612bcd57612bcc613e98565b5b8135612bdd848260208601612b08565b91505092915050565b600081359050612bf58161407f565b92915050565b600081519050612c0a8161407f565b92915050565b600081359050612c1f81614096565b92915050565b600081359050612c34816140ad565b92915050565b600060208284031215612c5057612c4f613ea7565b5b6000612c5e84828501612b78565b91505092915050565b60008060408385031215612c7e57612c7d613ea7565b5b6000612c8c85828601612b78565b9250506020612c9d85828601612c25565b9150509250929050565b600060208284031215612cbd57612cbc613ea7565b5b6000612ccb84828501612bfb565b91505092915050565b60008060408385031215612ceb57612cea613ea7565b5b6000612cf985828601612c10565b925050602083013567ffffffffffffffff811115612d1a57612d19613ea2565b5b612d2685828601612bb8565b9150509250929050565b600060208284031215612d4657612d45613ea7565b5b6000612d5484828501612c25565b91505092915050565b60008060408385031215612d7457612d73613ea7565b5b6000612d8285828601612c25565b9250506020612d9385828601612b78565b9150509250929050565b6000806101808385031215612db557612db4613ea7565b5b6000612dc385828601612c25565b9250506020612dd485828601612b8d565b9150509250929050565b600080600060608486031215612df757612df6613ea7565b5b6000612e0586828701612c25565b9350506020612e1686828701612c25565b9250506040612e2786828701612be6565b9150509250925092565b600080600080600060a08688031215612e4d57612e4c613ea7565b5b6000612e5b88828901612c25565b9550506020612e6c88828901612c25565b9450506040612e7d88828901612c25565b9350506060612e8e88828901612c25565b9250506080612e9f88828901612c25565b9150509295509295909350565b6000612eb88383612f09565b60208301905092915050565b6000612ed083836132a1565b905092915050565b6000612ee4838361337b565b6101a08301905092915050565b6000612efd8383613403565b60208301905092915050565b612f1281613be5565b82525050565b612f2181613be5565b82525050565b6000612f3282613821565b612f3c81856138af565b9350612f47836137d7565b8060005b83811015612f78578151612f5f8882612eac565b9750612f6a8361386e565b925050600181019050612f4b565b5085935050505092915050565b6000612f908261382c565b612f9a81856138c0565b935083602082028501612fac856137e7565b8060005b85811015612fe85784840389528151612fc98582612ec4565b9450612fd48361387b565b925060208a01995050600181019050612fb0565b50829750879550505050505092915050565b600061300582613837565b61300f81856138d1565b935061301a836137f7565b8060005b8381101561304b5781516130328882612ed8565b975061303d83613888565b92505060018101905061301e565b5085935050505092915050565b61306181613842565b61306b81846138e2565b925061307682613807565b8060005b838110156130a757815161308e8782612ef1565b965061309983613895565b92505060018101905061307a565b505050505050565b60006130ba8261384d565b6130c481856138ed565b93506130cf83613811565b8060005b838110156131005781516130e78882612ef1565b97506130f2836138a2565b9250506001810190506130d3565b5085935050505092915050565b61311681613c03565b82525050565b61312581613c0d565b82525050565b600061313682613858565b61314081856138fe565b9350613150818560208601613ca6565b61315981613eac565b840191505092915050565b61317561317082613c70565b613d7d565b82525050565b600061318682613863565b6131908185613920565b93506131a0818560208601613ca6565b80840191505092915050565b60006131b960168361390f565b91506131c482613ed7565b602082019050919050565b60006131dc60238361390f565b91506131e782613f00565b604082019050919050565b60006131ff60168361390f565b915061320a82613f4f565b602082019050919050565b6000613222600b83613920565b915061322d82613f78565b600b82019050919050565b6000613245603983613920565b915061325082613fa1565b603982019050919050565b600061326860178361390f565b915061327382613ff0565b602082019050919050565b600061328b60288361390f565b915061329682614019565b604082019050919050565b6000610140830160008301516132ba6000860182613403565b5060208301516132cd6020860182613403565b5060408301516132e06040860182613403565b5060608301516132f36060860182613403565b5060808301516133066080860182612f09565b5060a083015161331960a0860182613403565b5060c083015184820360c08601526133318282612f27565b91505060e083015161334660e0860182613403565b5061010083015161335b610100860182613403565b50610120830151613370610120860182613403565b508091505092915050565b6101a0820160008201516133926000850182612f09565b5060208201516133a56020850182613058565b5060408201516133b9610180850182613403565b50505050565b6101a0820160008201516133d66000850182612f09565b5060208201516133e96020850182613058565b5060408201516133fd610180850182613403565b50505050565b61340c81613c59565b82525050565b61341b81613c59565b82525050565b61343261342d82613c59565b613da1565b82525050565b60006134448285613164565b6014820191506134548284613421565b6020820191508190509392505050565b600061346f82613238565b915061347b828561317b565b915061348682613215565b9150613492828461317b565b91508190509392505050565b60006020820190506134b36000830184612f18565b92915050565b60006040820190506134ce6000830185612f18565b6134db6020830184613412565b9392505050565b600060e0820190506134f7600083018a612f18565b6135046020830189613412565b613511604083018861310d565b61351e606083018761311c565b61352b6080830186613412565b61353860a0830185613412565b81810360c083015261354a818461312b565b905098975050505050505050565b600060608201905061356d6000830186612f18565b61357a6020830185613412565b818103604083015261358c818461312b565b9050949350505050565b600060208201905081810360008301526135b08184612f85565b905092915050565b600060208201905081810360008301526135d28184612ffa565b905092915050565b600060208201905081810360008301526135f481846130af565b905092915050565b60006020820190508181036000830152613615816131ac565b9050919050565b60006020820190508181036000830152613635816131cf565b9050919050565b60006020820190508181036000830152613655816131f2565b9050919050565b600060208201905081810360008301526136758161325b565b9050919050565b600060208201905081810360008301526136958161327e565b9050919050565b60006101a0820190506136b260008301846133bf565b92915050565b60006020820190506136cd6000830184613412565b92915050565b6000610120820190506136e9600083018c613412565b6136f6602083018b613412565b613703604083018a613412565b6137106060830189613412565b61371d6080830188612f18565b61372a60a0830187613412565b61373760c0830186613412565b61374460e0830185613412565b613752610100830184613412565b9a9950505050505050505050565b600061376a61377b565b90506137768282613cd9565b919050565b6000604051905090565b600067ffffffffffffffff8211156137a05761379f613e69565b5b602082029050919050565b600067ffffffffffffffff8211156137c6576137c5613e69565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000600b9050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061393682613c59565b915061394183613c59565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561397657613975613ddc565b5b828201905092915050565b600061398c82613c59565b915061399783613c59565b9250826139a7576139a6613e0b565b5b828204905092915050565b6000808291508390505b60018511156139fc578086048111156139d8576139d7613ddc565b5b60018516156139e75780820291505b80810290506139f585613eca565b94506139bc565b94509492505050565b6000613a1082613c59565b9150613a1b83613c59565b9250613a487fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613a50565b905092915050565b600082613a605760019050613b1c565b81613a6e5760009050613b1c565b8160018114613a845760028114613a8e57613abd565b6001915050613b1c565b60ff841115613aa057613a9f613ddc565b5b8360020a915084821115613ab757613ab6613ddc565b5b50613b1c565b5060208310610133831016604e8410600b8410161715613af25782820a905083811115613aed57613aec613ddc565b5b613b1c565b613aff84848460016139b2565b92509050818404811115613b1657613b15613ddc565b5b81810290505b9392505050565b6000613b2e82613c59565b9150613b3983613c59565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b7257613b71613ddc565b5b828202905092915050565b6000613b8882613c59565b9150613b9383613c59565b925082821015613ba657613ba5613ddc565b5b828203905092915050565b6000613bbc82613c63565b9150613bc783613c63565b925082821015613bda57613bd9613ddc565b5b828203905092915050565b6000613bf082613c39565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613c7b82613c82565b9050919050565b6000613c8d82613c94565b9050919050565b6000613c9f82613c39565b9050919050565b60005b83811015613cc4578082015181840152602081019050613ca9565b83811115613cd3576000848401525b50505050565b613ce282613eac565b810181811067ffffffffffffffff82111715613d0157613d00613e69565b5b80604052505050565b6000613d1582613c59565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d4857613d47613ddc565b5b600182019050919050565b6000613d5e82613c63565b915060ff821415613d7257613d71613ddc565b5b600182019050919050565b6000613d8882613d8f565b9050919050565b6000613d9a82613ebd565b9050919050565b6000819050919050565b6000613db682613c59565b9150613dc183613c59565b925082613dd157613dd0613e0b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160011c9050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b7f26636f6e7465737449643d000000000000000000000000000000000000000000600082015250565b7f68747470733a2f2f63727970746f2d66616e746173792d646170702e7665726360008201527f656c2e6170702f6170692f73636f72653f6d6174636849643d00000000000000602082015250565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b61407181613be5565b811461407c57600080fd5b50565b61408881613bf7565b811461409357600080fd5b50565b61409f81613c03565b81146140aa57600080fd5b50565b6140b681613c59565b81146140c157600080fd5b5056fea26469706673582212202710670c3e97debbd129e8e3e2a64db9ef89bcdfcdc13a176deb048fdba29bc364736f6c63430008070033",
  "devdoc": {
    "author": "Jaswinder Singh   - https://github.com/jassi-singh",
    "kind": "dev",
    "methods": {
      "createContest(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "endDateTime": "end time of the contest",
          "fee": ", entryFee of the contest",
          "joinDeadline": "end time of the contest",
          "matchId": ": match id of the real match",
          "startDateTime": ", start time of the contest"
        }
      },
      "findWinnerOfContest(uint256)": {
        "params": {
          "contestId": ": id of the contest whose winner to be calculated"
        }
      },
      "fulfillPlayerData(bytes32,uint256[])": {
        "params": {
          "data": "recieved from api",
          "requestId": "id of request made to node"
        }
      },
      "fulfillScoreData(bytes32,uint256[])": {
        "params": {
          "data": "recieved from api",
          "requestId": "id of request made to node"
        }
      },
      "getContestPlayedByUser(address)": {
        "params": {
          "user": "address of user"
        }
      },
      "getContestTeamOfUser(uint256,address)": {
        "params": {
          "contestId": "id of the contest",
          "user": "address of user whose team you need"
        }
      },
      "getContestTeams(uint256)": {
        "params": {
          "contestId": "id of the contest"
        }
      },
      "joinMatch(uint256,uint256[11])": {
        "params": {
          "contestId": ": a integer id of the match which user wants to join",
          "playerIds": ": list of player ids (number of ids must be 11 as in a cricket match there are 11 players each team) present in the users team."
        }
      },
      "requestContestData(uint256,uint256,bool)": {
        "params": {
          "contestId": ", id of the contest",
          "dataType": "data type of data , if true player id, if false scores ",
          "matchId": ", id of the match"
        }
      }
    },
    "title": "Crypto Fantasy is a decentralized fantasy cricket game",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "createContest(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "allow only the contract owner to create the new contests which users can join and play"
      },
      "findWinnerOfContest(uint256)": {
        "notice": "start finding winner of a contest"
      },
      "fulfillPlayerData(bytes32,uint256[])": {
        "notice": "fullfill function for chainlink node to provide the data of playerids from api"
      },
      "fulfillScoreData(bytes32,uint256[])": {
        "notice": "fullfill function for chainlink node to provide the data of scores from api"
      },
      "getContestPlayedByUser(address)": {
        "notice": "get the list of contests played by a particular user"
      },
      "getContestTeamOfUser(uint256,address)": {
        "notice": "get the list of players of a user in a contest"
      },
      "getContestTeams(uint256)": {
        "notice": "get the mapping of all the user to team in a contest"
      },
      "joinMatch(uint256,uint256[11])": {
        "notice": "allow user to participate in a upcoming match"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "requestContestData(uint256,uint256,bool)": {
        "notice": "function to request chainlink node for the data from api"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "notice": "Anybody can play fantasy cricket game in a decentralized way with the help of this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)1156"
      },
      {
        "astId": 321,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1251"
      },
      {
        "astId": 327,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1331"
      },
      {
        "astId": 330,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 889,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "s_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2803,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "scoresOfPlayerInContest",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2809,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "scoresOfContest",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_uint256)22_storage)"
      },
      {
        "astId": 2815,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "playersOfContest",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_uint256)22_storage)"
      },
      {
        "astId": 3089,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "totalContest",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Contest)3075_storage)"
      },
      {
        "astId": 3096,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "teamsOfContest",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Team)3084_storage))"
      },
      {
        "astId": 3102,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "contestPlayedByUser",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_struct(Contest)3075_storage)dyn_storage)"
      },
      {
        "astId": 3104,
        "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
        "label": "numberOfContests",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Contest)3075_storage)dyn_storage": {
        "base": "t_struct(Contest)3075_storage",
        "encoding": "dynamic_array",
        "label": "struct CryptoFantasy.Contest[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)11_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[11]",
        "numberOfBytes": "352"
      },
      "t_array(t_uint256)22_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[22]",
        "numberOfBytes": "704"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)1156": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1251": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1331": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Contest)3075_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CryptoFantasy.Contest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Contest)3075_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Team)3084_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CryptoFantasy.Team)",
        "numberOfBytes": "32",
        "value": "t_struct(Team)3084_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)22_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[22])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)22_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Team)3084_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct CryptoFantasy.Team))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Team)3084_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Contest)3075_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CryptoFantasy.Contest)",
        "numberOfBytes": "32",
        "value": "t_struct(Contest)3075_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Contest)3075_storage": {
        "encoding": "inplace",
        "label": "struct CryptoFantasy.Contest",
        "members": [
          {
            "astId": 3055,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "contestId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3057,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "apiMatchId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3059,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "entryFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3061,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "poolPrize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3063,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "winner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3065,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "totalTeams",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3068,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "teamOwners",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3070,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "startDateTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3072,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "endDateTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3074,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "joinDeadline",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Team)3084_storage": {
        "encoding": "inplace",
        "label": "struct CryptoFantasy.Team",
        "members": [
          {
            "astId": 3077,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "teamOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3081,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "playerIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)11_storage"
          },
          {
            "astId": 3083,
            "contract": "contracts/cryptoFantasy.sol:CryptoFantasy",
            "label": "score",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
